title: Đừng bao giờ hài lòng với những gì mình đang biết
---
author: luanvv
---
cover: #
---
pub_date: 2018-11-21
---
summary: 5 năm, 7 năm, thậm chí là 10 năm, nhiều năm khinh nghiệm nhưng kiến thức vẫn kém.! Đừng đổ lỗi cho công việc!
---
tags:

dev
talk
---
body: Mình đi phỏng vấn khá nhiều. Từ Junior, Senior đến Technical Leader, mình nhận ra một điểm chung mà khá nhiều người gặp phải: Đổ lỗi cho công việc!
###Tôi chưa bao giờ làm nên không biết!
*Công việc của tôi chỉ là JSP/Servelet nên tôi không biết Spring/Hibernate!*  
*Tôi chưa bao giờ làm đa luồng nên không biết!*
Đó không phải là cách một Software Engineer sống và làm việc.
Năm 2014, lúc đó mình cũng mới ra trường, bị vứt ngay vào dự án vô cùng *cổ*, tuổi đời cũng không kém mình là bao. Dự án chỉ dùng JDK 1.4, JSP/Servlet(only), tất tần tật mọi thứ đều *thuần*. Chôn chân trong dự án đó 
###Cứ tìm hiểu là sẽ ra thôi!
Câu này rất hay được đưa ra, đặc biệt những người có nhiều năm kinh nghiệm. Đúng là cái gì tìm hiểu thì cũng ra thôi, nhưng đừng khiến sự hiểu biết đến một cách muộn màng và càng không nên ngụy biện kiểu đó.
Có một lần, công ty giao việc cho chúng tôi tạo tài khoản Amazon EC2 và Amazon RDS. Đương nhiên là lúc đó chúng tôi chưa có khái niệm gì về Amazon Web Service(AWS) cả. Và cay đắng cho câu "*Cứ tìm hiểu là sẽ ra*", chúng tôi mất hơn 200$ do tạo sai resource, sử dụng mất phí thay vì dùng trial(free). Một team khác, cũng "*mò mẫm*" giống team tôi và dính phải **WannaCry ransomware** do không tăng cường bảo mật cho EC2. Bài học ở đây là, giữa một người có hiểu biết từ trước và một người mới bắt đầu thì rõ ràng người có hiểu biết sẽ giúp giảm rủi ro xuống rất nhiều.  
Mình đi làm các dự án, đều gặp phải các dự án build mới từ đầu, công nghệ cũng đều mới với mình. Có một lần(thôi được rồi, nhiều lần), mình phải sửa trên **quy mô toàn project** do hiểu sai framework: hiểu sai về transaction, try catch exception, cách xử lý template khi build thành file jar,... Và mỗi lần như vậy, vừa tốn thời gian sửa, vừa tốn thời gian test lại toàn bộ hệ thống, khả năng sai sót hoặc gây chết các phần khác cũng là rất cao.
Mỗi công nghệ(framework, software, OS,...) đều có những thứ như *common issue*, *best practice*. Với những người hiểu biết, khi bắt đầu làm, họ sẽ apply những *best practice*, có phương án phòng tránh *common issue*. Khi có issue, họ có thể ngay lập tức họ đã kể được nguyên nhân, diễn biến, kết quả và cách fix rồi. Nhiều người luôn có tư tưởng: 
- Tôi thấy issue, tôi search, tôi fix, 
- Tôi thấy performance kém, tôi search, tôi tối ưu
....
Nhưng rõ ràng, *phòng bệnh hơn chữa bệnh*, đừng bao giờ có suy nghĩ *mất bò mới lo làm chuồng*
###Tôi vẫn làm rất tốt công việc hiện tại